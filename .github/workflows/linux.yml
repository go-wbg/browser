name: Build Firefox for Linux

on:
  workflow_dispatch:
  workflow_call:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip python3-setuptools python3-dev \
          build-essential cmake libpulse-dev libdbus-glib-1-dev \
          libx11-dev libxext-dev libxrender-dev libxt-dev libxft-dev \
          libgtk-3-dev libglib2.0-dev libpango1.0-dev libfontconfig1-dev \
          yasm libasound2-dev libcurl4-openssl-dev \
          libnss3-dev libnss3 git curl autoconf2.13

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Clone Firefox repository
        run: |
          git clone --depth 1 https://github.com/mozilla-firefox/firefox firefox-source
      
      - name: Inject configuration files
        run: |
          # Create directory for user preferences if it doesn't exist
          mkdir -p firefox-source/browser/app/profile/

          # Copy common configuration files
          if [ -d "./config/common" ]; then
            # Copy user.js if it exists
            if [ -f "./config/common/user.js" ]; then
              cp "./config/common/user.js" firefox-source/browser/app/profile/
              echo "Copied common user.js file"
            fi
            
            # Apply patches if they exist
            if [ -d "./config/common/patches" ] && [ "$(ls -A ./config/common/patches)" ]; then
              echo "Applying common patches..."
              for patch in ./config/common/patches/*.patch; do
                [ -f "$patch" ] || continue
                cd firefox-source && git apply "../$patch" && cd ..
                echo "Applied patch: $patch"
              done
            fi
          fi
          
          # Copy Linux-specific configuration files
          if [ -d "./config/linux" ]; then
            # Apply Linux-specific patches if they exist
            if [ -d "./config/linux/patches" ] && [ "$(ls -A ./config/linux/patches)" ]; then
              echo "Applying Linux-specific patches..."
              for patch in ./config/linux/patches/*.patch; do
                [ -f "$patch" ] || continue
                cd firefox-source && git apply "../$patch" && cd ..
                echo "Applied patch: $patch"
              done
            fi
          fi
          
          # Copy any other custom files/directories
          if [ -d "./config/common/custom" ]; then
            cp -r ./config/common/custom/* firefox-source/
            echo "Copied common custom files"
          fi
          
          if [ -d "./config/linux/custom" ]; then
            cp -r ./config/linux/custom/* firefox-source/
            echo "Copied Linux-specific custom files"
          fi
      
      - name: Configure build
        working-directory: firefox-source
        run: |
          # Create base mozconfig
          echo "# Build Firefox for Linux" > mozconfig
          echo "ac_add_options --enable-application=browser" >> mozconfig
          echo "ac_add_options --enable-optimize" >> mozconfig
          echo "ac_add_options --disable-debug" >> mozconfig
          echo "ac_add_options --enable-release" >> mozconfig
          echo "ac_add_options --disable-tests" >> mozconfig
          echo "mk_add_options MOZ_MAKE_FLAGS=\"-j$(nproc)\"" >> mozconfig
          
          # Append common mozconfig if it exists
          if [ -f "../config/common/mozconfig.common" ]; then
            cat "../config/common/mozconfig.common" >> mozconfig
            echo "Appended common mozconfig settings"
          fi
          
          # Append Linux-specific mozconfig if it exists
          if [ -f "../config/linux/mozconfig.linux" ]; then
            cat "../config/linux/mozconfig.linux" >> mozconfig
            echo "Appended Linux-specific mozconfig settings"
          fi
      
      - name: Bootstrap build environment
        working-directory: firefox-source
        run: |
          ./mach --no-interactive bootstrap --application-choice=browser
      
      - name: Build Firefox
        working-directory: firefox-source
        run: |
          ./mach build
      
      - name: Package Firefox
        working-directory: firefox-source
        run: |
          ./mach package
      
      - name: Upload Linux build
        uses: actions/upload-artifact@v4
        with:
          name: firefox-linux.tar.xz
          path: firefox-source/obj-*/dist/firefox-*.tar.xz
          if-no-files-found: warn
